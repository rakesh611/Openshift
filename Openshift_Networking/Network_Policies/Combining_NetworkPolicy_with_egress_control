üîç 1. What Are NetworkPolicies?
NetworkPolicies in OpenShift (same as Kubernetes) define which traffic is allowed or denied for pods ‚Äî both Ingress (incoming) and Egress (outgoing).
They work at the namespace (project) level and are implemented by the cluster network provider (like OVN-Kubernetes or OpenShiftSDN).

üåê 2. What Is Egress Control?
Egress means ‚Äútraffic leaving a pod‚Äù ‚Äî either:
to other pods (within or across namespaces), or
to external IPs or services outside the cluster (like internet, databases, or APIs).

OpenShift provides two layers of egress control:
| Layer | Feature                        | Scope               | Description                                                                       |
| ----- | ------------------------------ | ------------------- | --------------------------------------------------------------------------------- |
| **1** | `NetworkPolicy` (Egress rules) | Namespace           | Controls which destinations pods can reach (IP ranges, other namespaces).         |
| **2** | `EgressFirewall` / `EgressIP`  | Cluster / Namespace | Enforces namespace-wide external access control or fixed IP for outbound traffic. |
When combined, these give fine-grained + namespace-wide control.

‚öôÔ∏è 3. Egress Rules in NetworkPolicy
NetworkPolicies can include egress: sections that restrict what external destinations pods may contact.

Example: Deny-All and Allow-Specific Egress

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: restrict-egress
  namespace: app
spec:
  podSelector: {}     # Apply to all pods
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: 10.10.0.0/16   # Allow internal subnet (e.g., database network)
  - to:
    - ipBlock:
        cidr: 8.8.8.8/32     # Allow external DNS
Effect:
‚úÖ Pods in app namespace can talk to 10.10.0.0/16 and 8.8.8.8
‚ùå All other outbound destinations are blocked

üß± 4. Combining with Ingress (Bidirectional Control)
You can combine Ingress and Egress in the same NetworkPolicy to define both directions of allowed communication.

Example: Combine Both Ingress & Egress

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: app-secure
  namespace: payments
spec:
  podSelector:
    matchLabels:
      role: backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: frontend
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
Effect:
‚úÖ Backend pods only accept traffic from frontend namespace
‚úÖ Backend pods can only send traffic to database namespace
‚ùå All other directions blocked

üß© 5. Egress Control Beyond NetworkPolicy ‚Äî OpenShift Features
OpenShift provides two additional features beyond NetworkPolicy for stronger egress control.

üß∞ (a) EgressFirewall (Namespace-wide outbound control)
EgressFirewall is a Custom Resource Definition (CRD) provided by OpenShift to control external access for an entire namespace.

Example: Allow DNS + Block Internet

apiVersion: network.openshift.io/v1
kind: EgressNetworkPolicy
metadata:
  name: deny-internet
  namespace: team-a
spec:
  egress:
  - to:
      cidrSelector: 10.0.0.0/8
    type: Allow
  - to:
      cidrSelector: 0.0.0.0/0
    type: Deny
Effect:
‚úÖ Allows access to internal corporate network 10.0.0.0/8
‚ùå Denies access to the public internet
‚úÖ Useful for compliance ‚Äî prevents any pod in team-a from connecting outside your organization.

üß∞ (b) EgressIP (Static outbound IP per namespace)
You can assign a fixed egress IP address to pods in a namespace.

apiVersion: k8s.ovn.org/v1
kind: EgressIP
metadata:
  name: egress-ip-example
spec:
  egressIPs:
  - 192.168.122.50
  namespaceSelector:
    matchLabels:
      name: team-a
Effect:
All outbound traffic from namespace team-a will appear as coming from 192.168.122.50 externally.
‚úÖ Useful for NAT mapping, firewalls, or whitelisting external systems.

üîê 6. Combining All Together ‚Äî Practical Example
Let‚Äôs say you want:
Isolated namespace (team-a)
Allow only internal services (10.10.0.0/16)
Block external Internet
Fixed egress IP for audit

You can combine:
1Ô∏è‚É£ NetworkPolicy ‚Äî to restrict pod-level egress
2Ô∏è‚É£ EgressFirewall ‚Äî to block internet access
3Ô∏è‚É£ EgressIP ‚Äî to assign a static outbound IP

Summary Architecture:
| Feature        | Purpose                  | Example                          |
| -------------- | ------------------------ | -------------------------------- |
| NetworkPolicy  | Pod-level ingress/egress | Allow same-namespace only        |
| EgressFirewall | Namespace-wide block     | Deny 0.0.0.0/0 except 10.0.0.0/8 |
| EgressIP       | Assign fixed outbound IP | 192.168.122.50                   |

üß† 7. Key Points to Remember
| Concept                 | Default Behavior | Controlled By                  |
| ----------------------- | ---------------- | ------------------------------ |
| Pod-to-Pod (same ns)    | Allowed          | NetworkPolicy                  |
| Pod-to-Pod (cross ns)   | Allowed          | NetworkPolicy                  |
| Pod-to-External         | Allowed          | NetworkPolicy / EgressFirewall |
| Fixed Outbound IP       | Random (NATed)   | EgressIP                       |
| DNS, API Server Traffic | Always allowed   | Cluster internal rules         |

‚úÖ Summary
| Component                          | Scope               | Controls                           | Best For                                     |
| ---------------------------------- | ------------------- | ---------------------------------- | -------------------------------------------- |
| **NetworkPolicy (Ingress/Egress)** | Per-pod / namespace | Pod-to-pod & specific external IPs | Fine-grained microsegmentation               |
| **EgressFirewall**                 | Namespace-wide      | External access                    | Blocking internet or enforcing internal-only |
| **EgressIP**                       | Namespace-wide      | Outbound IP identity               | Compliance, firewall whitelisting            |

