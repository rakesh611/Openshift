üåê Stable Service IPs in OpenShift

üß† 1Ô∏è‚É£ Problem: Pod IPs Are Ephemeral
Each Pod in OpenShift gets an IP from the Cluster Network (e.g., 10.128.0.0/14).
Pods can be created, deleted, rescheduled, or moved across nodes.
When a Pod is recreated, it gets a new IP.
‚ùå This makes it impossible to hard-code Pod IPs for communication between services.

üèóÔ∏è 2Ô∏è‚É£ Solution: ClusterIP Services
Service is a Kubernetes/OpenShift object that provides a stable virtual IP (ClusterIP).
Pods connect to the Service IP instead of individual Pod IPs.
The Service maps the ClusterIP to the backend Pod IPs dynamically.

Example:
oc get svc myapp
NAME    TYPE        CLUSTER-IP      PORT(S)
myapp   ClusterIP   172.30.55.12    8080/TCP
172.30.55.12 is stable.
Even if the Pods behind myapp are recreated with new IPs, the ClusterIP never changes.

üß© 3Ô∏è‚É£ How OVN-Kubernetes Implements This
OpenShift 4.x uses OVN-Kubernetes, which implements Services with distributed logical load balancers.
Step-by-step packet flow for Pod ‚Üí Service ‚Üí Pod:
Pod A sends traffic to the Service IP 172.30.55.12:8080.
OVN checks its load balancer entry for this Service IP.
OVN maps the Service IP to one of the backend Pod IPs dynamically.
Packet is delivered to a backend Pod via Geneve overlay or local host routing.

Key point: Pods can come and go, but OVN updates the load balancer table automatically.
Service IP remains stable for all clients.

üîπ OVN Logical Load Balancer Entry Example
oc exec -n openshift-ovn-kubernetes ovnkube-master-<pod> -- ovn-nbctl list load_balancer
vips: {
  "172.30.55.12:8080"="10.128.2.14:8080,10.128.3.19:8080"
}
ClusterIP 172.30.55.12 always exists.
Backend Pods (10.128.2.14 and 10.128.3.19) may change dynamically.

üß≠ 4Ô∏è‚É£ Endpoint Objects
OpenShift automatically maintains Endpoints for each Service:
oc get endpoints myapp
NAME    ENDPOINTS
myapp   10.128.2.14:8080,10.128.3.19:8080
When Pods are deleted/added, Endpoints are updated.
Service IP remains unchanged, clients continue to reach the new Pods transparently.

‚ö° 5Ô∏è‚É£ Benefits of Stable Service IPs
Decoupling: Clients don‚Äôt need to know individual Pod IPs.
Load balancing: Service IP distributes traffic across Pods automatically.
Resilience: Pod failures or rescheduling do not break communication.
DNS integration: Each Service also gets a stable DNS name (<svc>.<namespace>.svc.cluster.local) resolving to the Service IP.

üì¶ 6Ô∏è‚É£ How DNS Works
OpenShift includes CoreDNS (or kube-dns).
Service myapp gets a DNS name:
myapp.default.svc.cluster.local ‚Üí 172.30.55.12
Pods can access the Service via DNS name or ClusterIP, both stable.
DNS queries are updated automatically when Service is created/deleted.

üîß 7Ô∏è‚É£ Commands to See Stability
Get service and ClusterIP:
oc get svc myapp
Check endpoints:
oc get endpoints myapp
Test from a Pod:
oc run -i --tty testpod --image=busybox --restart=Never -- sh
nslookup myapp
curl http://172.30.55.12:8080
Even if Pods behind the Service are recreated, the ClusterIP and DNS name remain the same.

üîë 8Ô∏è‚É£ Summary Table
| Concept           | Purpose                          | How OVN Helps                           |
| ----------------- | -------------------------------- | --------------------------------------- |
| Pod IP            | Ephemeral                        | Can change on restart                   |
| Service ClusterIP | Stable access point              | OVN maps ClusterIP ‚Üí Pod IP dynamically |
| Endpoints         | List of backend Pods             | OVN keeps updated load-balancer entries |
| DNS               | Resolve Service name ‚Üí ClusterIP | Always stable                           |

‚úÖ Key Takeaway:
In OpenShift, Services provide stable IPs for Pods by acting as virtual IPs with dynamic backend mapping. Clients connect to the Service IP or DNS name, not the individual Pod IPs, making communication resilient, stable, and load-balanced.
