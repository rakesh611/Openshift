🌐 NodePort Service Networking in OpenShift

🧠 1️⃣ What Is a NodePort Service?
A NodePort service in OpenShift (and Kubernetes) exposes an application outside the cluster by opening a port on each node’s host network interface.
It builds on top of the ClusterIP service (so it still has a ClusterIP internally).
It maps a Node’s IP and Port (the NodePort) → to → the Service’s ClusterIP and target Pods.
So external clients can reach a Pod through:
<NodeIP>:<NodePort>

💡 Example
If your service is created like this:
oc expose deployment myapp --port=8080 --type=NodePort
Then check:
oc get svc myapp
Output:
NAME     TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
myapp    NodePort   172.30.55.12    <none>        8080:31111/TCP   2m
ClusterIP: 172.30.55.12 (from Service Network)
NodePort: 31111 (from NodePort range)
NodeIP: node’s real host IP (e.g. 192.168.122.10)
So your app can now be accessed at:
http://192.168.122.10:31111

🏗️ 2️⃣ How NodePort Works in OpenShift
NodePort extends the ClusterIP concept by making the service accessible through the Host Network (Node’s IP).

🔹 Internally:
OpenShift still assigns a ClusterIP from the Service Network (e.g., 172.30.x.x).
OVN-Kubernetes (or kube-proxy in legacy) creates additional load-balancer entries for the Node’s physical IPs and NodePort.
Traffic hitting <NodeIP>:<NodePort> is redirected to the ClusterIP → then to one of the backend Pods.

📦 Simplified Packet Flow
Client (outside cluster)
   ↓
Node (192.168.122.10:31111)
   ↓
NodePort → Service (ClusterIP: 172.30.55.12:8080)
   ↓
Pod backend (10.128.2.14:8080)
All handled by OVN load-balancer rules on each node.

⚙️ 3️⃣ NodePort Range and Allocation
By default, OpenShift allocates NodePorts in the range:
30000–32767
This range can be changed via the kube-apiserver configuration if needed.

Example from a service definition:

apiVersion: v1
kind: Service
metadata:
  name: myapp
spec:
  type: NodePort
  selector:
    app: myapp
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 31111

🧩 4️⃣ Components Involved
| Component                       | Role                                                   |
| ------------------------------- | ------------------------------------------------------ |
| **OVN-Kubernetes / kube-proxy** | Programs load-balancing rules for ClusterIP + NodePort |
| **OVS (Open vSwitch)**          | Handles actual packet forwarding                       |
| **Service Network**             | Provides internal ClusterIP                            |
| **Host Network**                | Exposes Node’s IP and NodePort                         |
| **Endpoints**                   | Lists backend Pod IPs and ports                        |

🧭 5️⃣ How OVN-Kubernetes Handles NodePort in OpenShift 4.x
Unlike legacy iptables-based SDN, OVN-Kubernetes programs these rules directly into its distributed load balancer.

Example entry (view with):
oc exec -n openshift-ovn-kubernetes ovnkube-master-<pod> -- ovn-nbctl list load_balancer
You might see:
vips : {
  "172.30.55.12:8080"="10.128.2.14:8080,10.128.3.19:8080",
  "192.168.122.10:31111"="10.128.2.14:8080,10.128.3.19:8080"
}

This means:
Both the internal ClusterIP and external NodeIP:NodePort map to the same backend Pods.
Traffic from outside can reach pods on any node because every node participates in the distributed load balancing.

🌐 6️⃣ NodePort Access Scope
| Access From                   | Works? | Explanation                                                         |
| ----------------------------- | ------ | ------------------------------------------------------------------- |
| Same cluster (Pods, Services) | ✅      | Uses ClusterIP (internal routing)                                   |
| From Node’s local network     | ✅      | Access via NodeIP:NodePort                                          |
| From Internet                 | ✅*     | Only if firewall/NAT allows external access to that NodeIP and port |
(If your node’s IP is public or exposed via NAT/firewall rules.)

🛡️ 7️⃣ NodePort vs ClusterIP vs Route
| Feature               | **ClusterIP**               | **NodePort**                      | **Route (OpenShift)**   |
| --------------------- | --------------------------- | --------------------------------- | ----------------------- |
| Scope                 | Internal only               | External via NodeIP               | External via HTTP/HTTPS |
| Port Range            | Random from Service Network | 30000–32767                       | Standard ports (80/443) |
| Use Case              | Pod↔Pod                     | External testing or manual access | Expose web app publicly |
| Network Used          | Service Network             | Host Network                      | Router pods (Ingress)   |
| Externally Accessible | ❌                           | ✅                                 | ✅                       |

⚡ 8️⃣ Packet Flow (Visual)
     External Client
            │
        TCP 31111
            │
    ┌─────────────────────┐
    │ Node (Host Network) │
    │ IP: 192.168.122.10  │
    └─────────────────────┘
            │
     NodePort Rule (OVN LB)
            │
   ┌─────────────────────────┐
   │ ClusterIP: 172.30.55.12 │
   └─────────────────────────┘
            │
        Backend Pods
   ┌──────────┬──────────┐
   │10.128.2.14│10.128.3.19│
   └──────────┴──────────┘

🧰 9️⃣ Useful Commands
| Task                | Command                                                                                    |
| ------------------- | ------------------------------------------------------------------------------------------ |
| View services       | `oc get svc`                                                                               |
| Describe a NodePort | `oc describe svc <name>`                                                                   |
| Check node IPs      | `oc get nodes -o wide`                                                                     |
| Test access         | `curl <NodeIP>:<NodePort>`                                                                 |
| See OVN LB entries  | `oc exec -n openshift-ovn-kubernetes ovnkube-master-<pod> -- ovn-nbctl list load_balancer` |

✅ 🔟 Key Takeaways
| Concept                         | Description                                                 |
| ------------------------------- | ----------------------------------------------------------- |
| **NodePort**                    | Service type exposing app externally via Node IP & port     |
| **NodePort Range**              | 30000–32767 by default                                      |
| **Internal IP**                 | Still has a ClusterIP from Service Network                  |
| **External IP**                 | Node’s real IP (from Host Network)                          |
| **Routing**                     | Handled by OVN load-balancer in OCP 4.x                     |
| **Use Case**                    | Expose app for external testing, monitoring, or development |
| **Better Alternative for Prod** | Use **Route** or **Ingress** (OpenShift’s native method)    |

