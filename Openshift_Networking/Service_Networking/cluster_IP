🌐 ClusterIP Service Network in OpenShift

🧠 1. What is the Service Network?
The Service Network in OpenShift is a virtual network used for internal service discovery and load balancing between Pods.
When you create a Service in OpenShift (or Kubernetes), the system assigns it a virtual IP address from the Service Network CIDR range.
This IP is called a ClusterIP — hence the name ClusterIP Service.

🏗️ 2. Where It Comes From
In OpenShift, the Service Network range is defined in the cluster network configuration (managed by the network operator):
oc get network.config.openshift.io cluster -o yaml
Typical output:
spec:
  clusterNetwork:
  - cidr: 10.128.0.0/14
    hostPrefix: 23
  serviceNetwork:
  - 172.30.0.0/16
  defaultNetwork:
    type: OVNKubernetes

Here:
10.128.0.0/14 → Cluster Network (for Pod IPs)
172.30.0.0/16 → Service Network (for ClusterIP Services)
So every ClusterIP assigned to a service will come from 172.30.0.0/16.

🧩 3. What Is a ClusterIP Service?
A ClusterIP Service provides an internal virtual IP (VIP) inside the cluster to access a group of Pods.
It’s not routable outside the cluster — only Pods and components inside OpenShift can access it.

🧱 Example
Let’s create a simple service in OpenShift:
oc expose deployment myapp --port=8080 --target-port=8080
Then check:
oc get svc myapp
Output:
NAME    TYPE        CLUSTER-IP      PORT(S)    AGE
myapp   ClusterIP   172.30.118.55   8080/TCP   5m
👉 172.30.118.55 is from the Service Network CIDR (172.30.0.0/16).
That’s the virtual IP OpenShift assigns internally for this service.

⚙️ 4. How ClusterIP Works (Inside OpenShift)

🧭 Step-by-Step Flow: Pod → Service → Pod
Pod A makes a request to the Service IP (e.g., 172.30.118.55).
kube-proxy (in OpenShift 3.x) or OVN-Kubernetes (in OpenShift 4.x) intercepts traffic to that IP.
The service definition maps this IP and port to one or more backend Pods (Endpoints).
A load-balancing rule selects one backend Pod.
Packet is forwarded (using NAT or flow redirection) to the Pod IP (from Cluster Network).

🔹 Example Service + Endpoints

Service YAML:
apiVersion: v1
kind: Service
metadata:
  name: myapp
spec:
  selector:
    app: myapp
  ports:
  - port: 8080
    targetPort: 8080

Endpoints automatically created:

apiVersion: v1
kind: Endpoints
metadata:
  name: myapp
subsets:
- addresses:
  - ip: 10.128.2.15
  - ip: 10.128.3.22
  ports:
  - port: 8080

🧭 Packet Path
Pod (10.128.2.10)
  → Service IP (172.30.118.55)
     ↓
  OVN / iptables flow translation
     ↓
  Chosen Pod backend (e.g., 10.128.3.22)
All this happens inside the overlay network, completely invisible to the external world.

🧱 5. ClusterIP Is Internal Only
ClusterIP services:
Are not accessible from outside the cluster.
Work only between Pods, Services, and internal components.
To expose services externally, OpenShift provides:
NodePort Services
LoadBalancer Services
Routes / Ingress

🧭 6. How OVN-Kubernetes Handles ClusterIP
In OpenShift 4.x (OVN-based):
Each Service IP and Port becomes a logical load balancer rule in OVN’s Northbound DB.

The rule maps:
ClusterIP:Port → Backend Pod IPs:Port
ovn-northd translates this into OVS flow rules on all nodes.
So packets to the ClusterIP are distributed directly by OVS, no iptables needed.
This is faster and more scalable than the old kube-proxy/iptables model.

🔍 7. How to Verify Service Rules in OVN
You can inspect the OVN load-balancer configuration:
oc exec -n openshift-ovn-kubernetes ovnkube-master-<pod> -- ovn-nbctl list load_balancer
You’ll see entries like:
_uuid               : 6e0af1f2-6f1f-4d1b-bf4b-cc4f12345678
external_ids        : {k8s-cluster-lb="true"}
name                : "Service_lb"
vips                : {"172.30.118.55:8080"="10.128.2.15:8080,10.128.3.22:8080"}

Meaning:
Service IP 172.30.118.55:8080
Has two backend pods 10.128.2.15 and 10.128.3.22
OVN handles the balancing transparently.

🔧 8. Useful Commands
| Purpose                 | Command                                                                                    |
| ----------------------- | ------------------------------------------------------------------------------------------ |
| View all services       | `oc get svc -A`                                                                            |
| Describe a service      | `oc describe svc <name>`                                                                   |
| Get Endpoints           | `oc get endpoints <svc>`                                                                   |
| Check OVN load balancer | `oc exec -n openshift-ovn-kubernetes ovnkube-master-<pod> -- ovn-nbctl list load_balancer` |

🧭 9. Summary Diagram
                        ┌────────────────────────────────────┐
                        │         Service Network            │
                        │   (172.30.0.0/16) – Virtual IPs    │
                        └────────────────────────────────────┘
                                      │
                   ┌──────────────────┴──────────────────┐
                   │                                     │
           (Service IP: 172.30.118.55)            (ClusterIP Rules)
                   │                                     │
                   ▼                                     ▼
       ┌────────────────────────┐          ┌────────────────────────┐
       │ Pod A (10.128.2.15)    │          │ Pod B (10.128.3.22)    │
       │ Cluster Network (10.128.0.0/14)   │
       └────────────────────────┘          └────────────────────────┘
✅ 11. Key Takeaways
| Concept                        | Description                                   |
| ------------------------------ | --------------------------------------------- |
| **ClusterIP**                  | Virtual internal IP from Service Network      |
| **Service Network**            | Defines CIDR for all Service IPs              |
| **Purpose**                    | Internal service discovery and load balancing |
| **Routing**                    | Implemented by OVN load balancer (in OCP 4.x) |
| **Accessible from**            | Inside cluster only                           |
| **Example CIDR**               | `172.30.0.0/16`                               |
| **Replacement for kube-proxy** | OVN logical load-balancer                     |

