🔹 What is a Secret?
A Secret is an OpenShift (Kubernetes) object that contains confidential information in the form of key-value pairs.
It allows you to separate sensitive data from your application code and images.

🔹 Why use Secrets?
✅ Protect sensitive data like passwords, tokens, and certificates
✅ Keep credentials out of Git repositories and YAML manifests
✅ Simplify app configuration securely
✅ Provide controlled access through Role-Based Access Control (RBAC)
✅ Support automatic injection into pods via environment variables or files

🔹 Types of Secrets in OpenShift
| Secret Type                        | Description                                               |
| ---------------------------------- | --------------------------------------------------------- |
| **Opaque**                         | Default type; user-defined arbitrary key-value pairs      |
| **kubernetes.io/dockerconfigjson** | Used for image pull secrets (Docker registry credentials) |
| **kubernetes.io/basic-auth**       | Username/password authentication                          |
| **kubernetes.io/ssh-auth**         | SSH private key authentication                            |
| **kubernetes.io/tls**              | SSL/TLS certificate and key                               |
| **service-account-token**          | Automatically created for service accounts                |

🔹 Creating a Secret
You can create a secret in multiple ways.

1️⃣ From literal key-value pairs
oc create secret generic db-secret --from-literal=username=admin --from-literal=password=MyPass123

2️⃣ From a file
oc create secret generic tls-secret --from-file=server.crt --from-file=server.key

3️⃣ From a YAML manifest
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
type: Opaque
data:
  username: YWRtaW4=          # base64 encoded "admin"
  password: TXlQYXNzMTIz      # base64 encoded "MyPass123"

Apply it:
oc apply -f secret.yaml

🔹 View Secrets
List all secrets:
oc get secrets

Describe a secret (safe):
oc describe secret db-secret

View secret data (decoded):
oc get secret db-secret -o jsonpath='{.data.password}' | base64 -d

🔹 Using Secrets in Pods
Secrets can be used in two main ways:

1️⃣ As Environment Variables
apiVersion: v1
kind: Pod
metadata:
  name: secret-env-pod
spec:
  containers:
  - name: app
    image: nginx
    env:
    - name: DB_USERNAME
      valueFrom:
        secretKeyRef:
          name: db-secret
          key: username
    - name: DB_PASSWORD
      valueFrom:
        secretKeyRef:
          name: db-secret
          key: password

2️⃣ As Mounted Files (Volumes)
apiVersion: v1
kind: Pod
metadata:
  name: secret-volume-pod
spec:
  containers:
  - name: app
    image: nginx
    volumeMounts:
    - name: secret-volume
      mountPath: /etc/secret
      readOnly: true
  volumes:
  - name: secret-volume
    secret:
      secretName: db-secret

👉 Each key in the secret becomes a file inside /etc/secret.

🔹 Using Secrets in a Deployment (Example)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - name: app
        image: nginx
        env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: username
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: password

🔹 Secret + Service Account (Image Pull Secrets)
Used when pulling images from a private registry:
oc create secret docker-registry regcred \
  --docker-server=myregistry.com \
  --docker-username=myuser \
  --docker-password=mypassword \
  --docker-email=myemail@example.com

Attach it to the service account:
oc secrets link default regcred --for=pull

🔹 Best Practices
✅ Use Secrets for sensitive data only (use ConfigMaps for others)
✅ Never store decoded secrets in Git
✅ Use RBAC to control access
✅ Use encryption at rest (OpenShift supports this via etcd encryption)
✅ Automate secret rotation if possible
✅ Combine with Vault or External Secret Operator for dynamic secrets

🔹 Example: ConfigMap + Secret together
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: app
        image: nginx
        envFrom:
        - configMapRef:
            name: app-config
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: password

