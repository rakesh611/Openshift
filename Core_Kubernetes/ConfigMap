üîπ What is a ConfigMap?
A ConfigMap is an OpenShift (and Kubernetes) API object that lets you inject configuration data into containers.
It can contain:
Simple key-value pairs
Entire configuration files
Command-line arguments
Environment variables

üîπ Why use ConfigMaps?
Keep app configuration outside the image
Easily update configuration without rebuilding containers
Allow different environments (dev, test, prod) with same app image
Centralized management of configuration

üîπ Ways to Create ConfigMaps
You can create ConfigMaps in multiple ways:

1Ô∏è‚É£ From literal key-value pairs
oc create configmap my-config --from-literal=APP_MODE=production --from-literal=MAX_RETRIES=5

2Ô∏è‚É£ From a file
oc create configmap my-config --from-file=config.json

3Ô∏è‚É£ From a directory
oc create configmap my-config --from-file=/etc/config/

4Ô∏è‚É£ From a YAML manifest
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  APP_MODE: "production"
  DATABASE_URL: "postgres://user:pass@db:5432/mydb"

Apply using:
oc apply -f configmap.yaml

üîπ Viewing ConfigMaps
oc get configmaps
oc describe configmap app-config
oc get configmap app-config -o yaml

üîπ Using ConfigMaps in Pods
You can use ConfigMaps in three main ways:

1Ô∏è‚É£ As Environment Variables
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: app
    image: nginx
    envFrom:
    - configMapRef:
        name: app-config
üëâ All keys in app-config become environment variables in the container.

2Ô∏è‚É£ As Specific Environment Variables
Allow different environments (dev, test, prod) with same app image
Centralized management of configuration

üîπ Ways to Create ConfigMaps
You can create ConfigMaps in multiple ways:

1Ô∏è‚É£ From literal key-value pairs
oc create configmap my-config --from-literal=APP_MODE=production --from-literal=MAX_RETRIES=5

2Ô∏è‚É£ From a file
oc create configmap my-config --from-file=config.json

3Ô∏è‚É£ From a directory
oc create configmap my-config --from-file=/etc/config/

4Ô∏è‚É£ From a YAML manifest
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  APP_MODE: "production"
  DATABASE_URL: "postgres://user:pass@db:5432/mydb"
Apply using:
oc apply -f configmap.yaml

üîπ Viewing ConfigMaps
oc get configmaps
oc describe configmap app-config
oc get configmap app-config -o yaml

üîπ Using ConfigMaps in Pods
You can use ConfigMaps in three main ways:

1Ô∏è‚É£ As Environment Variables
env:
  - name: APP_MODE
    valueFrom:
      configMapKeyRef:
        name: app-config
        key: APP_MODE

3Ô∏è‚É£ As Configuration Files (Mounted Volume)
apiVersion: v1
kind: Pod
metadata:
  name: configmap-volume-pod
spec:
  containers:
  - name: mycontainer
    image: nginx
    volumeMounts:
    - name: config-volume
      mountPath: /etc/config
  volumes:
  - name: config-volume
    configMap:
      name: app-config
üëâ All ConfigMap keys become files under /etc/config inside the container.

üîπ Updating a ConfigMap
Edit directly:
oc edit configmap app-config

Or recreate:
oc create configmap app-config --from-literal=APP_MODE=staging -o yaml --dry-run=client | oc apply -f -
‚ö†Ô∏è Note: ConfigMap updates do not automatically restart pods using it (unless a mechanism like Deployment trigger or checksum annotation is used).

üîπ Example in Deployment (OpenShift)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        envFrom:
        - configMapRef:
            name: app-config

